---

- name: 'Apply plugin configuration for plugin {{ "(I: " + instance.name + ", P: " + plugin.name + ")" }}'
  community.general.ldap_attrs:
    bind_dn: '{{ dm_dn }}'
    bind_pw: '{{ dm_password }}'
    server_uri: '{{ server_uri }}'
    dn: 'cn={{ plugin.name }},cn=plugins,cn=config'
    attributes: '{{ plugin.attributes }}'
    state: exact
  when: plugin.attributes is defined


- name: 'Check if plugin should be enabled (1) { "(I: " + instance.name + ", P: " + plugin.name + ")" }}'
  ansible.builtin.set_fact:
    enable_plugin: "{%- if plugin.status.enabled is defined %}off{%- elif plugin.status.disabled is defined %}on{%- else %}unknown{%- endif %}"

- name: 'Check if plugin should be enabled (2) { "(I: " + instance.name + ", P: " + plugin.name + ")" }}'
  ansible.builtin.set_fact:
    enable_plugin: 'on'
  when:
    - plugin.status is defined
    - 'plugin.status | type_debug == "bool"'
    - plugin.status

- name: 'Check if plugin should be enabled (3) { "(I: " + instance.name + ", P: " + plugin.name + ")" }}'
  ansible.builtin.set_fact:
    enable_plugin: 'on'
  loop: '{{ plugin.status.enabled }}'
  when:
    - plugin.status.enabled is defined
    - item == inventory_hostname

- name: 'Check if plugin should be disabled (1) { "(I: " + instance.name + ", P: " + plugin.name + ")" }}'
  ansible.builtin.set_fact:
    enable_plugin: 'off'
  when:
    - plugin.status is defined
    - 'plugin.status | type_debug == "bool"'
    - not plugin.status

- name: 'Check if plugin should be disabled (2) { "(I: " + instance.name + ", P: " + plugin.name + ")" }}'
  ansible.builtin.set_fact:
    enable_plugin: 'off'
  loop: '{{ plugin.status.disabled }}'
  when:
    - plugin.status.disabled is defined
    - item == inventory_hostname


- name: 'Enable/Disable plugin { "(I: " + instance.name + ", P: " + plugin.name + ")" }}'
  community.general.ldap_attrs:
    bind_dn: '{{ dm_dn }}'
    bind_pw: '{{ dm_password }}'
    server_uri: '{{ server_uri }}'
    dn: 'cn={{ plugin.name }},cn=plugins,cn=config'
    attributes:
      nsslapd-pluginEnabled: '{{ enable_plugin }}'
    state: exact
  when: (enable_plugin == 'on') or (enable_plugin == 'off')
